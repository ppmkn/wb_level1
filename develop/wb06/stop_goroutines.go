/*
	1 способ:
	Использование канала для завершения горутины:
	можно использовать канал для передачи сигнала завершения горутине.
	Когда горутина получает сигнал из канала, она завершает выполнение
*/
done := make(chan bool) // Создаем канал

go func() {
    // здесь код горутины
    // ...
    // по завершению, отправляем сигнал в канал done
    done <- true
}()

// Ждем завершения горутины
<-done


/*
	2 способ:
	Использование контекста:
	можно использовать контекст для управления временем выполнения горутины.
	Когда контекст отменяется, горутина завершает выполнение
*/
import "context"

ctx, cancel := context.WithCancel(context.Background()) // Создаем контекст и функцию отмены

go func() {
    // здесь код горутины
    // ...
    // по завершению, вызываем функцию cancel()
    cancel()
}()

// Ждем завершения горутины
<-ctx.Done()


/*
	3 способ:
	Использование return:
	простой способ завершить выполнение горутины - это использовать оператор return.
	Горутина завершает выполнение, когда функция, в которой она находится, завершается
*/
go func() {
    // здесь код горутины
    // ...
    // вызываем return для завершения
    return
}()


/*
	4 способ:
	Использование panic:
	говорят не рекомендуется такое использовать,
	но можно использовать panic для принудительной остановки выполнения горутины
*/
go func() {
    // здесь код горутины
    // ...
    // принудительно завершаем выполнение горутины с помощью panic
    panic("горутина завершена")
}()


/*
	5 способ:
	Использование select с таймером:
	можно использовать select в сочетании с таймером,
	для ожидания завершения горутины в определенное время
*/
done := make(chan bool) // Создаем канал для сигнала завершения горутины

go func() {
    // здесь код горутины
    // ...
    // по завершению, отправляем сигнал в канал done
    done <- true
}()

select {
	case <-done:
		// Горутина завершилась
	case <-time.After(5 * time.Second):
		// Время истекло, горутина не завершилась
}

